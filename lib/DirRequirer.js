// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(modules, factory) {
    var m;
    if (typeof define === 'function' && define.amd) {
      return define(modules, factory);
    } else {
      return module.exports = factory.apply(null, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          _results.push(require(m));
        }
        return _results;
      })());
    }
  })(['requirejs', 'fs-readdir-recursive', 'path', 'when'], function(requirejs, readDir, path, When) {
    var DirRequirer;
    return DirRequirer = (function() {
      function DirRequirer(pathname, options) {
        var _base;
        this.pathname = pathname;
        this.options = options;
        if (typeof this.pathname === 'object') {
          this.options = this.pathname;
        }
        if (this.options == null) {
          this.options = {};
        }
        if ((_base = this.options).debug == null) {
          _base.debug = function() {};
        }
        this.options.extensions = ['js'];
        this.debug = this.options.debug;
      }

      DirRequirer.prototype.requireAll = function(pathname, callback) {
        var anyFileRead, dir, filename, promises, _i, _len, _ref, _ref1;
        if (typeof pathname === 'function') {
          callback = pathname;
          pathname = void 0;
        }
        if (pathname == null) {
          pathname = this.pathname;
        }
        if (typeof pathname !== 'string') {
          throw new TypeError("pathname should be a string, was " + pathname);
        }
        dir = path.join(path.resolve(path.dirname(), pathname));
        this.debug("Reading routes from " + dir);
        promises = [];
        anyFileRead = false;
        _ref = readDir(dir);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filename = _ref[_i];
          this.debug("Assessing file " + filename + " with extname " + path.extname(filename).slice(1) + " and basename " + path.basename(filename));
          if (_ref1 = path.extname(filename).slice(1), __indexOf.call(this.options.extensions, _ref1) >= 0) {
            (function(_this) {
              return (function(filename) {
                _this.debug("Trying to load file " + filename);
                anyFileRead = true;
                if (callback != null) {
                  return requirejs([path.join(dir, filename)], function(content) {
                    return callback(content, filename);
                  });
                } else {
                  return promises.push(When.promise(function(resolve) {
                    return requirejs([path.join(dir, filename)], function(content) {
                      return resolve({
                        filename: filename,
                        content: content
                      });
                    });
                  }));
                }
              });
            })(this)(filename);
          }
        }
        if (!anyFileRead) {
          if (callback) {
            throw new Error("No file found to read");
          } else {
            return When.reject(new Error("No file found to read"));
          }
        }
        if (!callback) {
          return promises;
        }
      };

      return DirRequirer;

    })();
  });

}).call(this);
