// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  (function(modules, factory) {
    var m;
    if (typeof define === 'function' && define.amd) {
      return define(modules, factory);
    } else {
      return module.exports = factory.apply(null, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          _results.push(require(m));
        }
        return _results;
      })());
    }
  })(['requirejs', 'fs-readdir-recursive', 'path', 'when'], function(requirejs, readDir, path, When) {
    var DirRequirer;
    return DirRequirer = (function() {
      function DirRequirer(pathname, options) {
        var _base;
        this.pathname = pathname;
        this.options = options;
        if (typeof this.pathname === 'object') {
          this.options = this.pathname;
        }
        if (this.options == null) {
          this.options = {};
        }
        if ((_base = this.options).debug == null) {
          _base.debug = function() {};
        }
        this.options.extension = '.js';
        this.debug = this.options.debug;
      }

      DirRequirer.prototype.requireAll = function(pathname, callback) {
        var anyFileRead, dependency, dir, filename, files, promises, _i, _len;
        if (typeof pathname === 'function') {
          callback = pathname;
          pathname = void 0;
        }
        if (pathname == null) {
          pathname = this.pathname;
        }
        if (typeof pathname !== 'string') {
          throw new TypeError("pathname should be a string, was " + pathname);
        }
        dir = requirejs.toUrl(pathname);
        this.debug("Reading routes from " + dir);
        promises = [];
        files = readDir(dir);
        anyFileRead = false;
        if (files != null) {
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            filename = files[_i];
            this.debug("Assessing file " + filename + " with extname " + path.extname(filename).slice(1) + " and basename " + path.basename(filename));
            if (path.extname(filename) === this.options.extension) {
              dependency = path.join(pathname, filename);
              (function(_this) {
                return (function(dependency) {
                  _this.debug("Trying to load file " + dependency);
                  anyFileRead = true;
                  if (callback != null) {
                    return requirejs([dependency], function(content) {
                      return callback(content, path.relative(requirejs.toUrl(''), dependency.slice(0, +(-(_this.options.extension + 1)) + 1 || 9e9)));
                    });
                  } else {
                    return promises.push(When.promise(function(resolve) {
                      return requirejs([dependency], function(content) {
                        return resolve({
                          filename: path.relative(requirejs.toUrl(''), dependency.slice(0, +(-(_this.options.extension + 1)) + 1 || 9e9)),
                          content: content
                        });
                      });
                    }));
                  }
                });
              })(this)(dependency);
            }
          }
        }
        if (!anyFileRead) {
          if (callback) {
            throw new Error("No file found to read");
          } else {
            return When.reject(new Error("No file found to read"));
          }
        }
        if (!callback) {
          return promises;
        }
      };

      DirRequirer.prototype.defineAll = function(pathname, additionalDeps, callback) {
        var deps, dir, dirDeps, filename, files;
        if (typeof additionalDeps === 'function') {
          callback = additionalDeps;
          additionalDeps = void 0;
        }
        if (Array.isArray(pathname)) {
          additionalDeps = pathname;
          pathname = void 0;
        }
        if (typeof pathname === 'function') {
          callback = pathname;
          pathname = void 0;
          additionalDeps = void 0;
        }
        if (pathname == null) {
          pathname = this.pathname;
        }
        if (additionalDeps == null) {
          additionalDeps = [];
        }
        if (typeof pathname !== 'string') {
          throw new TypeError("pathname should be a string, was " + pathname);
        }
        dir = requirejs.toUrl(pathname);
        this.debug("Reading routes from " + dir);
        files = readDir(dir);
        dirDeps = [];
        if (files != null) {
          dirDeps = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              filename = files[_i];
              if (path.extname(filename) === this.options.extension) {
                _results.push(path.join(pathname, filename));
              }
            }
            return _results;
          }).call(this);
        }
        deps = dirDeps.concat(additionalDeps);
        this.debug("Loading dependencies " + deps);
        return requirejs.define(deps, (function(_this) {
          return function() {
            var dirModules, i, modules, _i, _ref;
            modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            dirModules = {};
            for (i = _i = 0, _ref = dirDeps.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              dirModules[dirDeps[i].slice(0, +(-(_this.options.extension + 1)) + 1 || 9e9)] = modules[i];
            }
            return callback.apply(null, [dirModules].concat(modules.slice(dirDeps.length)));
          };
        })(this));
      };

      return DirRequirer;

    })();
  });

}).call(this);
